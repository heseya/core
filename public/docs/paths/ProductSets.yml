ProductSets:
  get:
    tags:
      - 'Product Sets'
    parameters:
      - name: root
        in: query
        description: 'Return only root lists'
        allowEmptyValue: true
        required: false
        schema:
          type: boolean
      - name: tree
        in: query
        description: 'Return sets starting from root with recursively nested children instead of id''s'
        allowEmptyValue: true
        required: false
        schema:
          type: boolean
      - name: search
        in: query
        description: 'Full text search'
        required: false
        schema:
          type: string
      - name: name
        in: query
        description: 'Name search'
        required: false
        schema:
          type: string
      - name: slug
        in: query
        description: 'Slug search'
        schema:
          type: string
      - name: public
        in: query
        description: 'Is public search'
        required: false
        schema:
          type: boolean
      - name: parent_id
        in: query
        description: 'UUID of parent set'
        required: false
        schema:
          type: string
          example: ' 019fc7e8-af32-476f-ba04-068b86833830'
      - name: metadata
        in: query
        description: search by metadata
        style: deepObject
        explode: true
        required: false
        schema:
          $ref: '../schemas/Metadata.yml#/MetadataQuery'
      - name: metadata_private
        in: query
        description: search by metadata private
        style: deepObject
        explode: true
        required: false
        schema:
          $ref: '../schemas/Metadata.yml#/MetadataQuery'
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  type: array
                  items:
                    oneOf:
                      - $ref: './../schemas/ProductSets.yml#/ProductSet'
                      - $ref: './../schemas/ProductSets.yml#/ProductSetChildren'
              type: object
  post:
    tags:
      - 'Product Sets'
    parameters:
      - name: tree
        in: query
        description: 'Return set with recursively nested children instead of id''s'
        allowEmptyValue: true
        schema:
          type: boolean
    requestBody:
      $ref: './../requests/ProductSets.yml#/ProductSetStore'
    responses:
      201:
        description: Created
        content:
          application/json:
            schema:
              properties:
                data:
                  type: object
                  oneOf:
                    - $ref: './../schemas/ProductSets.yml#/ProductSetParent'
                    - $ref: './../schemas/ProductSets.yml#/ProductSetParentChildren'
              type: object
    security:
      - BearerAuth: [ ]
ProductSetsSlug:
  get:
    tags:
      - 'Product Sets'
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
      - name: tree
        in: query
        description: 'Return set with recursively nested children instead of id''s'
        allowEmptyValue: true
        schema:
          type: boolean
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  type: object
                  oneOf:
                    - $ref: './../schemas/ProductSets.yml#/ProductSetParent'
                    - $ref: './../schemas/ProductSets.yml#/ProductSetParentChildren'
              type: object
ProductSetsParams:
  get:
    tags:
      - 'Product Sets'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: tree
        in: query
        description: 'Return set with recursively nested children instead of id''s'
        allowEmptyValue: true
        schema:
          type: boolean
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  type: object
                  oneOf:
                    - $ref: './../schemas/ProductSets.yml#/ProductSetParent'
                    - $ref: './../schemas/ProductSets.yml#/ProductSetParentChildren'
              type: object
  delete:
    tags:
      - 'Product Sets'
    description: 'Delete set with all of it''s subsets'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 0006c3a0-21af-4485-b7fe-9c42233cf03a
    responses:
      204:
        description: Success
    security:
      - BearerAuth: [ ]
  patch:
    tags:
      - 'Product Sets'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 0006c3a0-21af-4485-b7fe-9c42233cf03a
      - name: tree
        in: query
        description: 'Return set with recursively nested children instead of id''s'
        allowEmptyValue: true
        schema:
          type: boolean
    requestBody:
      $ref: './../requests/ProductSets.yml#/ProductSetUpdate'
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  type: object
                  oneOf:
                    - $ref: './../schemas/ProductSets.yml#/ProductSetParent'
                    - $ref: './../schemas/ProductSets.yml#/ProductSetParentChildren'
              type: object
    security:
      - BearerAuth: [ ]
ProductSetsReorder:
  post:
    tags:
      - 'Product Sets'
    requestBody:
      $ref: './../requests/ProductSets.yml#/ProductSetReorder'
    responses:
      204:
        description: Success
    security:
      - BearerAuth: [ ]
ProductSetsReorderParams:
  post:
    tags:
      - 'Product Sets'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 0006c3a0-21af-4485-b7fe-9c42233cf03a
    requestBody:
      $ref: './../requests/ProductSets.yml#/ProductSetReorder'
    responses:
      204:
        description: Success
    security:
      - BearerAuth: [ ]
ProductSetsProducts:
  get:
    tags:
      - 'Product Sets'
    parameters:
      - name: limit
        in: query
        description: 'Pagination limit'
        schema:
          type: number
      - name: id
        in: path
        required: true
        schema:
          type: string
          example: 1c8705ce-5fae-4468-b88a-8784cb5414a0
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  type: array
                  items:
                    $ref: './../schemas/Products.yml#/Product'
              type: object
    security:
      - BearerAuth: [ ]
  post:
    tags:
      - 'Product Sets'
    parameters:
      - name: id
        in: path
        description: 'List of product id''s'
        required: true
        schema:
          type: string
          example: 0006c3a0-21af-4485-b7fe-9c42233cf03a
    requestBody:
      $ref: './../requests/ProductSets.yml#/ProductSetAttach'
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  type: array
                  items:
                    $ref: './../schemas/Products.yml#/Product'
              type: object
    security:
      - BearerAuth: [ ]
ProductSetsProductsReorder:
  post:
    tags:
      - 'Product Sets'
    parameters:
      - name: id
        in: query
        description: 'Product set id'
        allowEmptyValue: false
        schema:
          type: string
    requestBody:
      $ref: './../requests/ProductSets.yml#/ProductSetProductReorder'
    responses:
      204:
        description: No content
    security:
      - BearerAuth: [ ]
