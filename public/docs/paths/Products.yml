Products:
  get:
    tags:
      - Products
    summary: 'list products'
    parameters:
      - name: search
        in: query
        description: 'Full text search'
        schema:
          type: string
      - name: name
        in: query
        description: 'Name search'
        schema:
          type: string
      - name: slug
        in: query
        description: 'Slug search'
        schema:
          type: string
      - name: public
        in: query
        description: 'Is public search'
        schema:
          type: boolean
      - name: full
        in: query
        description: 'Returns details resource'
        schema:
          type: boolean
      - name: 'sets[]'
        in: query
        description: 'Product set array slug search'
        schema:
          type: string
        example: 'sets[]=category-teapots&sets[]=category-mugs'
      - name: 'sets_not[]'
        in: query
        description: 'Product set array slug search negation'
        schema:
          type: string
        example: 'sets_not[]=category-teapots&sets_not[]=category-mugs'
      - name: sort
        in: query
        description: 'Sorting string'
        schema:
          type: string
          example: 'price:asc,created_at:desc,name'
      - name: 'tags[]'
        in: query
        description: 'Tag array id search'
        schema:
          type: string
        example: 'tags[]=5a61f3a1-1cd1-4e71-bf7d-0d3a159bd6b0&tags[]=33e37b2a-44e9-4d35-88db-d9a79a61e557'
      - name: 'tags_not[]'
        in: query
        description: 'Tag array id search negation'
        schema:
          type: string
        example: 'tags_not[]=5a61f3a1-1cd1-4e71-bf7d-0d3a159bd6b0&tags_not[]=33e37b2a-44e9-4d35-88db-d9a79a61e557'
      - name: available
        in: query
        description: 'Is available search'
        schema:
          type: boolean
      - name: price.min
        in: query
        schema:
          type: number
      - name: price.max
        in: query
        schema:
          type: number
      - name: has_cover
        in: query
        description: 'Product has set cover'
        schema:
          type: boolean
      - name: attribute
        in: query
        description: 'search by attributes'
        style: deepObject
        explode: true
        required: false
        schema:
          type: object
          properties:
            autor:
              type: string
            ilosc-stron:
              type: object
              properties:
                min:
                  type: number
                max:
                  type: number
      - name: attribute_not
        in: query
        description: 'search by attributes negation'
        style: deepObject
        explode: true
        required: false
        schema:
          type: object
          properties:
            autor:
              type: string
            ilosc-stron:
              type: object
              properties:
                min:
                  type: number
                max:
                  type: number
      - name: metadata
        in: query
        description: 'search by metadata'
        style: deepObject
        explode: true
        required: false
        schema:
          $ref: '../schemas/Metadata.yml#/MetadataQuery'
      - name: metadata_private
        in: query
        description: 'search by metadata private'
        style: deepObject
        explode: true
        required: false
        schema:
          $ref: '../schemas/Metadata.yml#/MetadataQuery'
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  type: array
                  items:
                    $ref: './../schemas/Products.yml#/ProductIndex'
              type: object
  post:
    tags:
      - Products
    summary: 'create product'
    requestBody:
      $ref: './../requests/Products.yml#/ProductStore'
    responses:
      201:
        description: Created
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: './../schemas/Products.yml#/ProductView'
              type: object
    security:
      - BearerAuth: [ ]

ProductsSlug:
  get:
    tags:
      - Products
    summary: 'single product view'
    parameters:
      - name: slug
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: './../schemas/Products.yml#/ProductView'
              type: object

ProductsParams:
  get:
    tags:
      - Products
    summary: alias
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: './../schemas/Products.yml#/ProductView'
              type: object
    security:
      - BearerAuth: [ ]

  delete:
    tags:
      - Products
    summary: 'delete product'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    responses:
      204:
        description: Success
    security:
      - BearerAuth: [ ]

  patch:
    tags:
      - Products
    summary: 'update product'
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    requestBody:
      $ref: './../requests/Products.yml#/ProductUpdate'
    responses:
      200:
        description: Success
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: './../schemas/Products.yml#/ProductView'
              type: object
    security:
      - BearerAuth: [ ]
